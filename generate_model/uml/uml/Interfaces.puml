@startuml

Class Interface {
  + Interface();
  + virtual ~Interface();
  + virtual Caller* get_caller() = 0;
}

{% for interface in MAIN.INTERFACES.values() %}
Class {{interface.D_NAME}} #FFFFFF {
{% for d in interface.DATA -%}
   {{d.TYPE.D_NAME}} {{d.NAME}}
{% endfor %}
{% for f in interface.FUNCTION -%}
   {{f.RETURN.D_NAME}} {{f.NAME}}(
   {%- for p in f.SIGNATURE -%}
   + {{p.TYPE.D_NAME}} {{p.NAME}}{%if not loop.last%},{%endif%}
   {%- endfor -%})
{% endfor -%}
}

Class {{interface.D_NAME}}_fake #FFDDDD {
      + {{interface.NAME}}_fake(Function_stream, Return_stream)
}

{{interface.D_NAME}} <|-- {{interface.D_NAME}}_fake

Class {{interface.D_NAME}}_caller #DDFFDD {
      + {{interface.NAME}}_caller()
      + ~{{interface.NAME}}_caller()
      + bool call(Function_stream &is, Return_stream &os)
}

{{interface.D_NAME}} *-- {{interface.D_NAME}}_caller



{% if "PARENT" in interface %}
{{interface.PARENT.D_NAME}} <|-- {{interface.D_NAME}}
{% else %}
Interface <|-- {{interface.D_NAME}}
{% endif %}

{% endfor %}

{% for m in MAIN.COMPONENTS.values() %}
{% for p in m.PROVIDE %}
class {{m.D_NAME}}::{{p.INTERFACE.NAME}}_{{p.NAME}} #DDFFDD {
      - {{m.D_NAME}}::{{m.NAME}} c
}
{{p.INTERFACE.D_NAME}} <|-- {{m.D_NAME}}::{{p.INTERFACE.NAME}}_{{p.NAME}}
{% endfor %}
{% endfor %}

@enduml
