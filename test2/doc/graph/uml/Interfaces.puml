@startuml

Class Interface {
  + Interface();
  + virtual ~Interface();
  + virtual Caller* get_caller() = 0;
}


Class I_t1 #FFFFFF {

}

Class I_t1_fake #FFDDDD {
      + I_t1_fake(Function_stream, Return_stream)
}

I_t1 <|-- I_t1_fake

Class I_t1_caller #DDFFDD {
      + I_t1_caller()
      + ~I_t1_caller()
      + bool call(Function_stream &is, Return_stream &os)
}

I_t1 *-- I_t1_caller




Interface <|-- I_t1



Class I_t3 #FFFFFF {

}

Class I_t3_fake #FFDDDD {
      + I_t3_fake(Function_stream, Return_stream)
}

I_t3 <|-- I_t3_fake

Class I_t3_caller #DDFFDD {
      + I_t3_caller()
      + ~I_t3_caller()
      + bool call(Function_stream &is, Return_stream &os)
}

I_t3 *-- I_t3_caller




Interface <|-- I_t3



Class I_t4 #FFFFFF {

}

Class I_t4_fake #FFDDDD {
      + I_t4_fake(Function_stream, Return_stream)
}

I_t4 <|-- I_t4_fake

Class I_t4_caller #DDFFDD {
      + I_t4_caller()
      + ~I_t4_caller()
      + bool call(Function_stream &is, Return_stream &os)
}

I_t4 *-- I_t4_caller




Interface <|-- I_t4



Class I_t2 #FFFFFF {

}

Class I_t2_fake #FFDDDD {
      + I_t2_fake(Function_stream, Return_stream)
}

I_t2 <|-- I_t2_fake

Class I_t2_caller #DDFFDD {
      + I_t2_caller()
      + ~I_t2_caller()
      + bool call(Function_stream &is, Return_stream &os)
}

I_t2 *-- I_t2_caller




I_t1 <|-- I_t2






class C_t1p_i_p #DDFFDD {
      - C_t1p c
}
I_t2 <|-- C_t1p_i_p

class C_t1p_i_p2 #DDFFDD {
      - C_t1p c
}
I_t1 <|-- C_t1p_i_p2









class C_n_i_p1 #DDFFDD {
      - C_n c
}
I_t3 <|-- C_n_i_p1

class C_n_i_p2 #DDFFDD {
      - C_n c
}
I_t4 <|-- C_n_i_p2



@enduml