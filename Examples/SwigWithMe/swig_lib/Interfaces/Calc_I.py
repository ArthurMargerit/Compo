# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Calc_I
else:
    import _Calc_I

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Serializable_Item(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def to_stream(self, *args):
        return _Calc_I.Serializable_Item_to_stream(self, *args)

    def from_stream(self, *args):
        return _Calc_I.Serializable_Item_from_stream(self, *args)

    def __str__(self):
        return _Calc_I.Serializable_Item___str__(self)

    def from_string(self, arg2):
        return _Calc_I.Serializable_Item_from_string(self, arg2)
    __swig_destroy__ = _Calc_I.delete_Serializable_Item

# Register Serializable_Item in _Calc_I:
_Calc_I.Serializable_Item_swigregister(Serializable_Item)

class Serialization_context_import(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Calc_I.Serialization_context_import_swiginit(self, _Calc_I.new_Serialization_context_import())
    __swig_destroy__ = _Calc_I.delete_Serialization_context_import

    def import_wanted(self, os):
        return _Calc_I.Serialization_context_import_import_wanted(self, os)

    def get_loc(self, *args):
        return _Calc_I.Serialization_context_import_get_loc(self, *args)

    def is_wanted_loc(self, arg2):
        return _Calc_I.Serialization_context_import_is_wanted_loc(self, arg2)

    def is_wanted_loc_sp(self, p_ext):
        return _Calc_I.Serialization_context_import_is_wanted_loc_sp(self, p_ext)

    def inscribe(self, p_ext, p_loc):
        return _Calc_I.Serialization_context_import_inscribe(self, p_ext, p_loc)

    def is_inscribe(self, p_ext):
        return _Calc_I.Serialization_context_import_is_inscribe(self, p_ext)

# Register Serialization_context_import in _Calc_I:
_Calc_I.Serialization_context_import_swigregister(Serialization_context_import)

class Serialization_context_export(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Calc_I.Serialization_context_export_swiginit(self, _Calc_I.new_Serialization_context_export())
    __swig_destroy__ = _Calc_I.delete_Serialization_context_export

    def export_wanted(self, os):
        return _Calc_I.Serialization_context_export_export_wanted(self, os)

    def want(self, arg2):
        return _Calc_I.Serialization_context_export_want(self, arg2)

    def declare(self, arg2):
        return _Calc_I.Serialization_context_export_declare(self, arg2)

    def is_declare(self, arg2):
        return _Calc_I.Serialization_context_export_is_declare(self, arg2)

    def is_wanted(self, arg2):
        return _Calc_I.Serialization_context_export_is_wanted(self, arg2)

# Register Serialization_context_export in _Calc_I:
_Calc_I.Serialization_context_export_swigregister(Serialization_context_export)


def get_type(_is):
    return _Calc_I.get_type(_is)

def get_addr(_is):
    return _Calc_I.get_addr(_is)

def get_word(_is, one_of):
    return _Calc_I.get_word(_is, one_of)

def to_pointer(ptr):
    return _Calc_I.to_pointer(ptr)

def p_to_stream(*args):
    return _Calc_I.p_to_stream(*args)

def p_from_stream(*args):
    return _Calc_I.p_from_stream(*args)

def __lshift__(*args):
    return _Calc_I.__lshift__(*args)

def __rshift__(*args):
    return _Calc_I.__rshift__(*args)
class Serializable_fac(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def get_inst():
        return _Calc_I.Serializable_fac_get_inst()

    def build(self, p_type, p_stream, arg4):
        return _Calc_I.Serializable_fac_build(self, p_type, p_stream, arg4)

    def build_sp(self, p_type, p_stream):
        return _Calc_I.Serializable_fac_build_sp(self, p_type, p_stream)

    def subscribe(self, ss, v, v_sp):
        return _Calc_I.Serializable_fac_subscribe(self, ss, v, v_sp)

# Register Serializable_fac in _Calc_I:
_Calc_I.Serializable_fac_swigregister(Serializable_fac)

def Serializable_fac_get_inst():
    return _Calc_I.Serializable_fac_get_inst()

class Interface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Calc_I.Interface_swiginit(self, _Calc_I.new_Interface())
    __swig_destroy__ = _Calc_I.delete_Interface

    def get_caller_stream(self):
        return _Calc_I.Interface_get_caller_stream(self)

    def get_caller_dbus(self):
        return _Calc_I.Interface_get_caller_dbus(self)

    def is_fake(self):
        return _Calc_I.Interface_is_fake(self)

# Register Interface in _Calc_I:
_Calc_I.Interface_swigregister(Interface)

class Fake_stream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        _Calc_I.Fake_stream_swiginit(self, _Calc_I.new_Fake_stream(arg2, arg3))
    __swig_destroy__ = _Calc_I.delete_Fake_stream

    def get_i(self):
        return _Calc_I.Fake_stream_get_i(self)

    def get_o(self):
        return _Calc_I.Fake_stream_get_o(self)

# Register Fake_stream in _Calc_I:
_Calc_I.Fake_stream_swigregister(Fake_stream)

class Caller_stream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_Caller_stream

    def call(self, *args):
        return _Calc_I.Caller_stream_call(self, *args)

    def introspection(self, ss):
        return _Calc_I.Caller_stream_introspection(self, ss)

# Register Caller_stream in _Calc_I:
_Calc_I.Caller_stream_swigregister(Caller_stream)

class Function_stream_recv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_Function_stream_recv

    def get_si(self):
        return _Calc_I.Function_stream_recv_get_si(self)

    def pull(self):
        return _Calc_I.Function_stream_recv_pull(self)

    def end(self):
        return _Calc_I.Function_stream_recv_end(self)

    def get(self):
        return _Calc_I.Function_stream_recv_get(self)

# Register Function_stream_recv in _Calc_I:
_Calc_I.Function_stream_recv_swigregister(Function_stream_recv)

class Function_stream_send(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_Function_stream_send

    def get_so(self):
        return _Calc_I.Function_stream_send_get_so(self)

    def start(self):
        return _Calc_I.Function_stream_send_start(self)

    def send(self):
        return _Calc_I.Function_stream_send_send(self)

# Register Function_stream_send in _Calc_I:
_Calc_I.Function_stream_send_swigregister(Function_stream_send)

class Return_stream_recv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_Return_stream_recv

    def get_si(self):
        return _Calc_I.Return_stream_recv_get_si(self)

    def pull(self):
        return _Calc_I.Return_stream_recv_pull(self)

    def end(self):
        return _Calc_I.Return_stream_recv_end(self)

# Register Return_stream_recv in _Calc_I:
_Calc_I.Return_stream_recv_swigregister(Return_stream_recv)

class Return_stream_send(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_Return_stream_send

    def get_so(self):
        return _Calc_I.Return_stream_send_get_so(self)

    def start(self):
        return _Calc_I.Return_stream_send_start(self)

    def send(self):
        return _Calc_I.Return_stream_send_send(self)

# Register Return_stream_send in _Calc_I:
_Calc_I.Return_stream_send_swigregister(Return_stream_send)

class Calc_I(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def get_fake_stream(fs, rs):
        return _Calc_I.Calc_I_get_fake_stream(fs, rs)

    @staticmethod
    def get_fake_dbus(fs, rs):
        return _Calc_I.Calc_I_get_fake_dbus(fs, rs)

    def get_caller_stream(self):
        return _Calc_I.Calc_I_get_caller_stream(self)
    __swig_destroy__ = _Calc_I.delete_Calc_I

    def add(self, a, b):
        return _Calc_I.Calc_I_add(self, a, b)

    def sub(self, a, b):
        return _Calc_I.Calc_I_sub(self, a, b)

    def time(self, a, b):
        return _Calc_I.Calc_I_time(self, a, b)

    def div(self, a, b):
        return _Calc_I.Calc_I_div(self, a, b)

# Register Calc_I in _Calc_I:
_Calc_I.Calc_I_swigregister(Calc_I)

def Calc_I_get_fake_stream(fs, rs):
    return _Calc_I.Calc_I_get_fake_stream(fs, rs)

def Calc_I_get_fake_dbus(fs, rs):
    return _Calc_I.Calc_I_get_fake_dbus(fs, rs)

class Calc_I_fake_stream(Calc_I, Fake_stream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, out, _in):
        _Calc_I.Calc_I_fake_stream_swiginit(self, _Calc_I.new_Calc_I_fake_stream(out, _in))
    __swig_destroy__ = _Calc_I.delete_Calc_I_fake_stream

    def is_fake(self):
        return _Calc_I.Calc_I_fake_stream_is_fake(self)

    def add(self, a, b):
        return _Calc_I.Calc_I_fake_stream_add(self, a, b)

    def sub(self, a, b):
        return _Calc_I.Calc_I_fake_stream_sub(self, a, b)

    def time(self, a, b):
        return _Calc_I.Calc_I_fake_stream_time(self, a, b)

    def div(self, a, b):
        return _Calc_I.Calc_I_fake_stream_div(self, a, b)

# Register Calc_I_fake_stream in _Calc_I:
_Calc_I.Calc_I_fake_stream_swigregister(Calc_I_fake_stream)

class Calc_I_caller_stream(Caller_stream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pcomp):
        _Calc_I.Calc_I_caller_stream_swiginit(self, _Calc_I.new_Calc_I_caller_stream(pcomp))

    def call(self, _is, os):
        return _Calc_I.Calc_I_caller_stream_call(self, _is, os)
    __swig_destroy__ = _Calc_I.delete_Calc_I_caller_stream

# Register Calc_I_caller_stream in _Calc_I:
_Calc_I.Calc_I_caller_stream_swigregister(Calc_I_caller_stream)

class Require_helper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_Require_helper

    def fake_stream_it(self, fs, rs):
        return _Calc_I.Require_helper_fake_stream_it(self, fs, rs)

    def fake_dbus_it(self, fs, rs):
        return _Calc_I.Require_helper_fake_dbus_it(self, fs, rs)

    def disconnect_it(self):
        return _Calc_I.Require_helper_disconnect_it(self)

    def connected(self):
        return _Calc_I.Require_helper_connected(self)

    def set_i(self, p_i):
        return _Calc_I.Require_helper_set_i(self, p_i)

    def type(self):
        return _Calc_I.Require_helper_type(self)

    def set_parent(self, p_parent):
        return _Calc_I.Require_helper_set_parent(self, p_parent)

    def __lshift__(self, os):
        return _Calc_I.Require_helper___lshift__(self, os)

    def from_stream(self, _is, p_ctx):
        return _Calc_I.Require_helper_from_stream(self, _is, p_ctx)

    def to_stream(self, os, p_ctx):
        return _Calc_I.Require_helper_to_stream(self, os, p_ctx)

# Register Require_helper in _Calc_I:
_Calc_I.Require_helper_swigregister(Require_helper)

class require_Calc_I(Require_helper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Calc_I.delete_require_Calc_I

    def __init__(self, *args):
        _Calc_I.require_Calc_I_swiginit(self, _Calc_I.new_require_Calc_I(*args))

    def fake_stream_it(self, fs, rs):
        return _Calc_I.require_Calc_I_fake_stream_it(self, fs, rs)

    def fake_dbus_it(self, fs, rs):
        return _Calc_I.require_Calc_I_fake_dbus_it(self, fs, rs)

    def disconnect_it(self):
        return _Calc_I.require_Calc_I_disconnect_it(self)

    def connected(self):
        return _Calc_I.require_Calc_I_connected(self)

    def __deref__(self):
        return _Calc_I.require_Calc_I___deref__(self)

    def set_i(self, p_i):
        return _Calc_I.require_Calc_I_set_i(self, p_i)

    def set(self, p_i):
        return _Calc_I.require_Calc_I_set(self, p_i)

    def child_connect(self, c):
        return _Calc_I.require_Calc_I_child_connect(self, c)

    def child_disconnect(self, c):
        return _Calc_I.require_Calc_I_child_disconnect(self, c)

    def to_stream(self, os, p_ctx):
        return _Calc_I.require_Calc_I_to_stream(self, os, p_ctx)

    def from_stream(self, _is, p_ctx):
        return _Calc_I.require_Calc_I_from_stream(self, _is, p_ctx)

    def get(self):
        return _Calc_I.require_Calc_I_get(self)

    def type(self):
        return _Calc_I.require_Calc_I_type(self)

    def get_fake_stream(self, fs, rs):
        return _Calc_I.require_Calc_I_get_fake_stream(self, fs, rs)

    def get_fake_dbus(self, fs, rs):
        return _Calc_I.require_Calc_I_get_fake_dbus(self, fs, rs)

    def get_caller_stream(self):
        return _Calc_I.require_Calc_I_get_caller_stream(self)

    def add(self, a, b):
        return _Calc_I.require_Calc_I_add(self, a, b)

    def sub(self, a, b):
        return _Calc_I.require_Calc_I_sub(self, a, b)

    def time(self, a, b):
        return _Calc_I.require_Calc_I_time(self, a, b)

    def div(self, a, b):
        return _Calc_I.require_Calc_I_div(self, a, b)

    def get_caller_dbus(self):
        return _Calc_I.require_Calc_I_get_caller_dbus(self)

    def is_fake(self):
        return _Calc_I.require_Calc_I_is_fake(self)

# Register require_Calc_I in _Calc_I:
_Calc_I.require_Calc_I_swigregister(require_Calc_I)



