#include "Links/Dbus_server/Dbus_server.hpp"

#include "Interfaces/Interface.hpp"

Dbus_server::Dbus_server() : Link() {
  static bool f = true;
  if (f == true) {
    DBus::init();
    f = false;
  }
}

Dbus_server::~Dbus_server() {}

void Dbus_server::step() {
  DBus::Message::pointer msg;

  Link::step();

  conn->read_write(0);
  msg = conn->pop_message();
  if (not msg) {
    return;
  }

  if (msg->type() == DBus::CALL_MESSAGE) {
    DBus::CallMessage::create(msg);

    DBus::CallMessage::pointer msgc;
    msgc = DBus::CallMessage::create(msg);

    DBus::ReturnMessage::pointer reply;
    reply = msg->create_reply();
    if (this->connected()) {
      this->get_caller().call(msgc, reply);
    } else {
      std::cerr << "Not connected in the link...";
    }

    conn << reply;
    conn->flush();
  }
}

void Dbus_server::connect() {
  Link::connect();

  //this->conn = DBus::Connection::create(DBus::BUS_SESSION);
  this->conn = DBus::Connection::create(DBus::BUS_SESSION,false);

  // request a name on the bus
  int ret = conn->request_name(this->get_object_name(),
                               DBUS_NAME_FLAG_REPLACE_EXISTING);

  if (DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER != ret) {
    return;
  }
}

void Dbus_server::disconnect() { Link::disconnect(); }

// Get and set /////////////////////////////////////////////////////////////

// Get and set /////////////////////////////////////////////////////////////

string Dbus_server::get_object_name() const { return this->object_name; }

void Dbus_server::set_object_name(const string p_object_name) {
  this->object_name = p_object_name;
}
