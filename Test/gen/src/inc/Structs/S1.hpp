#pragma once

#include <memory>
#include <ostream>

#include "Structs/Struct.hpp"

// TYPES

// d.D_NAME

#include "Types/B/i.hpp"

// STRUCTS

namespace DBus {
class MessageIterator;
class MessageAppendIterator;
} // namespace DBus

class S1 : public CompoMe::Struct {
public:
  /////////////////////////////////////////////////////////////////////////////
  //                               CONSTRUCTEUR                              //
  /////////////////////////////////////////////////////////////////////////////

  S1();

  virtual ~S1();

  S1(B::i p_a);

  /////////////////////////////////////////////////////////////////////////////
  //                               GET and SET                               //
  /////////////////////////////////////////////////////////////////////////////
  B::i get_a() const;
  void set_a(const B::i &);
  B::i &a_a();

  /////////////////////////////////////////////////////////////////////////////
  //                               FUNCTION                                  //
  /////////////////////////////////////////////////////////////////////////////

  // OPERATOR == and != ///////////////////////////////////////////////////////
  bool operator==(const S1 &other) const;
  bool operator!=(const S1 &other) const;

  std::ostream &
  to_stream(std::ostream &os,
            CompoMe::Serialization_context_export &p_ctx) const override;
  std::istream &
  from_stream(std::istream &is,
              CompoMe::Serialization_context_import &p_ctx) override;

private:
  /////////////////////////////////////////////////////////////////////////////
  //                                ATTRIBURE                                //
  /////////////////////////////////////////////////////////////////////////////
  B::i a;
};

///////////////////////////////////////////////////////////////////////////////
//                               << STREAM >>                                //
///////////////////////////////////////////////////////////////////////////////
// Simple
std::ostream &operator<<(std::ostream &os, const S1 &c);
std::istream &operator>>(std::istream &os, S1 &c);
///////////////////////////////////////////////////////////////////////////////
