#include "Interfaces/I1/I1_fake.hpp"
#include "Errors/Error.hpp"

I1_fake::I1_fake(Function_stream &out, Return_stream &in) : Fake(out, in) {}

I1_fake::~I1_fake() noexcept {}

///////////////////////////////////////////////////////////////////////////////
//                                  FUNCTION                                 //
///////////////////////////////////////////////////////////////////////////////

// INTERFACE Function I1 ////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//                                    DATA                                   //
///////////////////////////////////////////////////////////////////////////////

// INTERFACE get/set I1 /////////////////////////////////////////////////
void I1_fake::get_f()() const {
  this->get_o().start();
  this->get_o() << "get_f()()";
  this->get_o().call();

  this->get_i().pull();
  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }

  void ret;
  this->get_i() >> ret;
  this->get_i().end();

  return ret;
}

void I1_fake::set_f()(const void &f()) {
  this->get_o().start();
  this->get_o() << "set_f()(" << f() << ")";
  this->get_o().call();

  this->get_i().pull();

  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  } else {
    std::string empty;
    std::getline(this->get_i(), empty);
    if (empty != "") {
      throw "Error: set return something";
    }
  }
  this->get_i().end();
  return;
}
void I1_fake::get_f1()() const {
  this->get_o().start();
  this->get_o() << "get_f1()()";
  this->get_o().call();

  this->get_i().pull();
  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }

  void ret;
  this->get_i() >> ret;
  this->get_i().end();

  return ret;
}

void I1_fake::set_f1()(const void &f1()) {
  this->get_o().start();
  this->get_o() << "set_f1()(" << f1() << ")";
  this->get_o().call();

  this->get_i().pull();

  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  } else {
    std::string empty;
    std::getline(this->get_i(), empty);
    if (empty != "") {
      throw "Error: set return something";
    }
  }
  this->get_i().end();
  return;
}
  void I1_fake::get_f2(i32() const {
  this->get_o().start();
  this->get_o() << "get_f2(i32()";
  this->get_o().call();

  this->get_i().pull();
  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }

  void ret;
  this->get_i() >> ret;
  this->get_i().end();

  return ret;
}

void
I1_fake::set_f2(i32(const void& f2(i32) {
  this->get_o().start();
  this->get_o() << "set_f2(i32("
    << f2(i32
  << ")";
  this->get_o().call();

  this->get_i().pull();

  if(this->get_i().get_si()->peek() == '!'){
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }else{
    std::string empty;
    std::getline(this->get_i(), empty);
    if (empty != "") {
      throw "Error: set return something";
    }
  }
  this->get_i().end();
  return;
}
  void I1_fake::get_f3(i32() const {
  this->get_o().start();
  this->get_o() << "get_f3(i32()";
  this->get_o().call();

  this->get_i().pull();
  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }

  void ret;
  this->get_i() >> ret;
  this->get_i().end();

  return ret;
}

void
I1_fake::set_f3(i32(const void& f3(i32) {
  this->get_o().start();
  this->get_o() << "set_f3(i32("
    << f3(i32
  << ")";
  this->get_o().call();

  this->get_i().pull();

  if(this->get_i().get_si()->peek() == '!'){
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }else{
    std::string empty;
    std::getline(this->get_i(), empty);
    if (empty != "") {
      throw "Error: set return something";
    }
  }
  this->get_i().end();
  return;
}
  i32 I1_fake::get_f4()() const {
  this->get_o().start();
  this->get_o() << "get_f4()()";
  this->get_o().call();

  this->get_i().pull();
  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }

  i32 ret;
  this->get_i() >> ret;
  this->get_i().end();

  return ret;
}

void
I1_fake::set_f4()(const i32& f4()) {
  this->get_o().start();
  this->get_o() << "set_f4()(" << f4() << ")";
  this->get_o().call();

  this->get_i().pull();

  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  } else {
    std::string empty;
    std::getline(this->get_i(), empty);
    if (empty != "") {
      throw "Error: set return something";
    }
  }
  this->get_i().end();
  return;
}
  i32 I1_fake::get_f5(i32() const {
  this->get_o().start();
  this->get_o() << "get_f5(i32()";
  this->get_o().call();

  this->get_i().pull();
  if (this->get_i().get_si()->peek() == '!') {
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }

  i32 ret;
  this->get_i() >> ret;
  this->get_i().end();

  return ret;
}

void
I1_fake::set_f5(i32(const i32& f5(i32) {
  this->get_o().start();
  this->get_o() << "set_f5(i32("
    << f5(i32
  << ")";
  this->get_o().call();

  this->get_i().pull();

  if(this->get_i().get_si()->peek() == '!'){
    this->get_i().get_si()->get();
    std::shared_ptr<Error> l_e;
    this->get_i() >> l_e;
    l_e->real();
  }else{
    std::string empty;
    std::getline(this->get_i(), empty);
    if (empty != "") {
      throw "Error: set return something";
    }
  }
  this->get_i().end();
  return;
}
