
#include "Interfaces/I1/I1_caller.hpp"
#include "Errors/Error.hpp"
#include "Errors/Error_fac.hpp"

constexpr unsigned int str2int(const char *str, int h = 0) {
  return !str[h] ? 5381 : (str2int(str, h + 1) * 33) ^ str[h];
}

I1_caller::I1_caller(I1 &pcomp) : Caller(), comp(pcomp) { return; }

bool I1_caller::call(Function_stream &is, Return_stream &os) {
  is.start();

  std::string name_function;
  std::getline(is, name_function, '(');
  bool b = this->call(name_function, is, os);

  std::string end_function;
  std::getline(is, end_function);
  if (end_function != "") {
    b = false;
  }

  os.end();
  return b;
}

bool I1_caller::call(std::string &name_function, Function_stream &is,
                     Return_stream &os) {
  bool result = false;

  switch (str2int(name_function.c_str())) {

  case str2int("get_f()"):
    result = this->get_f()(is, os);
    break;

  case str2int("set_f()"):
    result = this->set_f()(is, os);
    break;

  case str2int("get_f1()"):
    result = this->get_f1()(is, os);
    break;

  case str2int("set_f1()"):
    result = this->set_f1()(is, os);
    break;

  case str2int("get_f2(i32"):
    result = this->get_f2(i32(is, os);
    break;

  case str2int("set_f2(i32"):
    result = this->set_f2(i32(is, os);
    break;
    
  case str2int("get_f3(i32"):
    result = this->get_f3(i32(is, os);
    break;

  case str2int("set_f3(i32"):
    result = this->set_f3(i32(is, os);
    break;
    
  case str2int("get_f4()"):
    result = this->get_f4()(is, os);
    break;

  case str2int("set_f4()"):
    result = this->set_f4()(is, os);
    break;
    
  case str2int("get_f5(i32"):
    result = this->get_f5(i32(is, os);
    break;

  case str2int("set_f5(i32"):
    result = this->set_f5(i32(is, os);
    break;
  };

  return result;
}

bool I1_caller::get_f()(Function_stream &is, Return_stream &os) {
  char _l = is.get();
  if (_l != ')') {
    return false;
  }

  try {
    os << this->comp.get_f()();
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::set_f()(Function_stream &is, Return_stream &os) {
  void set_val;
  is >> set_val;

  char l = is.get();
  if (l != ')') {
    return false;
  }

  try {
    this->comp.set_f()(set_val);
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::get_f1()(Function_stream &is, Return_stream &os) {
  char _l = is.get();
  if (_l != ')') {
    return false;
  }

  try {
    os << this->comp.get_f1()();
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::set_f1()(Function_stream &is, Return_stream &os) {
  void set_val;
  is >> set_val;

  char l = is.get();
  if (l != ')') {
    return false;
  }

  try {
    this->comp.set_f1()(set_val);
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::get_f2(i32(Function_stream& is, Return_stream& os)
{
  char _l = is.get();
  if (_l != ')') {
    return false;
  }

  try {
    os << this->comp.get_f2(i32();
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::set_f2(i32(Function_stream& is, Return_stream& os)
{
  void set_val;
  is >> set_val;

  char l = is.get();
  if (l != ')') {
    return false;
  }

  try {
    this->comp.set_f2(i32(set_val);
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}


bool I1_caller::get_f3(i32(Function_stream& is, Return_stream& os)
{
  char _l = is.get();
  if (_l != ')') {
    return false;
  }

  try {
    os << this->comp.get_f3(i32();
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::set_f3(i32(Function_stream& is, Return_stream& os)
{
  void set_val;
  is >> set_val;

  char l = is.get();
  if (l != ')') {
    return false;
  }

  try {
    this->comp.set_f3(i32(set_val);
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}


bool I1_caller::get_f4()(Function_stream& is, Return_stream& os)
{
  char _l = is.get();
  if (_l != ')') {
    return false;
  }

  try {
    os << this->comp.get_f4()();
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::set_f4()(Function_stream& is, Return_stream& os)
{
  i32 set_val;
  is >> set_val;

  char l = is.get();
  if (l != ')') {
    return false;
  }

  try {
    this->comp.set_f4()(set_val);
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}


bool I1_caller::get_f5(i32(Function_stream& is, Return_stream& os)
{
  char _l = is.get();
  if (_l != ')') {
    return false;
  }

  try {
    os << this->comp.get_f5(i32();
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}

bool I1_caller::set_f5(i32(Function_stream& is, Return_stream& os)
{
  i32 set_val;
  is >> set_val;

  char l = is.get();
  if (l != ')') {
    return false;
  }

  try {
    this->comp.set_f5(i32(set_val);
  } catch (const Error &e) {
    os << "!" << &e;
  }

  return true;
}
