#pragma once

#include "Data/code.hpp"
#include "Interfaces/I1/I1.hpp"

namespace C_p {

class C_p;

class I1_ii : public ::I1 {
public:
  C_p *composant;

  //! Default constructor
  I1_ii(C_p *comp);

  //! Destructor
  virtual ~I1_ii() noexcept;

  I1_ii() = delete;
  //! Copy constructor
  I1_ii(const I1_ii &other) = delete;
  //! Move constructor
  I1_ii(I1_ii &&other) = delete;
  // //! Copy assignment operator
  // I1& operator=(const I1 &other)=delete;
  // //! Move assignment operator
  // I1& operator=(I1 &&other) noexcept;

  bool is_fake() override { return false; }

  ///////////////////////////////////////////////////////////////////////////
  //                                FUNCTION                               //
  ///////////////////////////////////////////////////////////////////////////

  // I1 /////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////////////////
  //                              GET/SET                                  //
  ///////////////////////////////////////////////////////////////////////////

  // I1 ///////////////////////////////////////////////////////////////////
  // get/set f()
  void get_f()() const override;
  void set_f()(const void &f()) override;
  // get/set f1()
  void get_f1()() const override;
  void set_f1()(const void &f1()) override;
  // get/set f2(i32
void get_f2(i32() const override;
void set_f2(i32(const void& f2(i32) override;
// get/set f3(i32
void get_f3(i32() const override;
void set_f3(i32(const void& f3(i32) override;
// get/set f4()
i32 get_f4()() const override;
void set_f4()(const i32& f4()) override;
// get/set f5(i32
i32 get_f5(i32() const override;
void set_f5(i32(const i32& f5(i32) override;


    

    ///////////////////////////////////////////////////////////////////////////
    //                            SAVE/LOAD                                  //
    ///////////////////////////////////////////////////////////////////////////
    void save(std::ostream& os) const;
    void load(std::istream& is);

  private:
    C_p& get_c() const;

    
    ///////////////////////////////////////////////////////////////////////////
    //                                  DATA                                 //
    ///////////////////////////////////////////////////////////////////////////
    
    // DATA for I1
void f();
void f1();
void f2(i32;
void f3(i32;
i32 f4();
i32 f5(i32;
};
} // namespace C_p
