#pragma once

#include <memory>
#include <ostream>

#include "Structs/Struct.hpp"

// TYPES

// STRUCTS

namespace S {

struct S1;

} // namespace S

#include "Structs/S1.hpp"

namespace DBus {
class MessageIterator;
class MessageAppendIterator;
} // namespace DBus

namespace S {

class S2 : public CompoMe::Struct {
public:
  /////////////////////////////////////////////////////////////////////////////
  //                               CONSTRUCTEUR                              //
  /////////////////////////////////////////////////////////////////////////////

  S2();

  virtual ~S2();

  S2(S1 p_s);

  /////////////////////////////////////////////////////////////////////////////
  //                               GET and SET                               //
  /////////////////////////////////////////////////////////////////////////////
  S1 get_s() const;
  void set_s(const S1 &);
  S1 &a_s();

  /////////////////////////////////////////////////////////////////////////////
  //                               FUNCTION                                  //
  /////////////////////////////////////////////////////////////////////////////

  // OPERATOR == and != ///////////////////////////////////////////////////////
  bool operator==(const S::S2 &other) const;
  bool operator!=(const S::S2 &other) const;

  std::ostream &
  to_stream(std::ostream &os,
            CompoMe::Serialization_context_export &p_ctx) const override;
  std::istream &
  from_stream(std::istream &is,
              CompoMe::Serialization_context_import &p_ctx) override;

private:
  /////////////////////////////////////////////////////////////////////////////
  //                                ATTRIBURE                                //
  /////////////////////////////////////////////////////////////////////////////
  S1 s;
};

///////////////////////////////////////////////////////////////////////////////
//                               << STREAM >>                                //
///////////////////////////////////////////////////////////////////////////////
// Simple
std::ostream &operator<<(std::ostream &os, const S2 &c);
std::istream &operator>>(std::istream &os, S2 &c);
///////////////////////////////////////////////////////////////////////////////

} // namespace S
